#!/usr/bin/env bash

# dotfiles
#
# Copyright 2019 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: install
# Description: Dotfiles install script.

function error()
{
    local -r param_message="$1"

    ( >&2 echo "$MNEMONIC: $param_message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r param_message="$1"

        error "$param_message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $MNEMONIC - Install dotfiles."
    echo "SYNOPSIS"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC --version"
    echo "    $MNEMONIC --all"
    echo "    $MNEMONIC [<dotfiles>]"
    echo "OPTIONS"
    echo "    --all"
    echo "        Install all supported dotfiles."
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "    <dotfiles>"
    echo "        The whitespace separated list of dotfiles to install. The following"
    echo "        dotfiles are supported:"

    for dotfile in "${SUPPORTED_DOTFILES[@]}"; do
        echo "            $dotfile"
    done

    echo "EXAMPLES"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC --version"
    echo "    $MNEMONIC --all"
    echo "    $MNEMONIC ${SUPPORTED_DOTFILES[*]}"
}

function display_version()
{
    echo "$MNEMONIC, version $( git -C "$REPOSITORY" describe --always --dirty --broken )"
}

function valid_dotfile()
{
    local -r param_dotfile="$1"

    for dotfile in "${SUPPORTED_DOTFILES[@]}"; do
        if [[ "$param_dotfile" == "$dotfile" ]]; then
            return 0
        fi
    done

    return 1
}

function validate_dotfiles()
{
    while [[ "$#" -gt 0 ]]; do
        local param_dotfile="$1"
        shift

        if ! valid_dotfile "$param_dotfile"; then
            abort "'$param_dotfile' is not a supported dotfile"
        fi
    done
}

function install_dotfile()
{
    local -r param_dotfile="$1"

    local -r dotfile="$HOME/$param_dotfile"

    if [[ -L "$dotfile" ]]; then
        rm "$dotfile"
    fi

    if [[ -e "$dotfile" ]]; then
        local -r archive="$HOME/dotfiles-archive"
        local -r archived_dotfile="$archive/$param_dotfile"

        if [[ ! -d "$archive" ]]; then
            if ! mkdir "$archive" >/dev/null; then
                abort "archive directory creation failure"
            fi
        fi

        if [[ -e "$archived_dotfile" ]]; then
            abort "'$param_dotfile' archive already exists"
        fi

        if ! mv "$dotfile" "$archived_dotfile"; then
            abort "'$param_dotfile' archive creation failure"
        fi
    fi

    if ! ln -s "$REPOSITORY/$param_dotfile" "$dotfile"; then
        abort "'$param_dotfile' installation failure"
    fi
}

function install_dotfiles()
{
    while [[ "$#" -gt 0 ]]; do
        local param_dotfile="$1"
        shift

        install_dotfile "$param_dotfile"
    done
}

function main()
{
    SCRIPT=$( readlink -f "$0" ); readonly SCRIPT
    MNEMONIC=$( basename "$SCRIPT" ); readonly MNEMONIC
    REPOSITORY=$( dirname "$SCRIPT" ); readonly REPOSITORY

    mapfile -t SUPPORTED_DOTFILES < <( cd "$REPOSITORY" && git ls-files -- . ':!:.gitmodules' | cut -d / -f 1 | sort -u | xargs -r -d '\n' -I '{}' find {} -maxdepth 0 -name '.*' ); readonly SUPPORTED_DOTFILES

    local dotfiles=()

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"
        shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --all)
                dotfiles=( "${SUPPORTED_DOTFILES[@]}" )
                break
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                dotfiles+=( "$argument" )
                ;;
        esac
    done

    readonly dotfiles

    validate_dotfiles "${dotfiles[@]}"
    install_dotfiles "${dotfiles[@]}"
}

main "$@"
