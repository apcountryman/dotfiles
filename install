#!/usr/bin/env bash

# dotfiles
#
# Copyright 2019 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: install
# Description: Dotfiles install script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Install dotfiles."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --all"
    echo "    $mnemonic [<dotfiles>]"
    echo "OPTIONS"
    echo "    --all"
    echo "        Install all supported dotfiles."
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "    <dotfiles>"
    echo "        The whitespace separated list of dotfiles to install. The following"
    echo "        dotfiles are supported:"

    for dotfile in "${supported_dotfiles[@]}"; do
        echo "            $dotfile"
    done

    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --all"
    echo "    $mnemonic ${supported_dotfiles[*]}"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function valid_dotfile()
{
    local -r dotfile="$1"

    for supported_dotfile in "${supported_dotfiles[@]}"; do
        if [[ "$dotfile" == "$supported_dotfile" ]]; then
            return 0
        fi
    done

    return 1
}

function validate_dotfiles()
{
    for dotfile in "${selected_dotfiles[@]}"; do
        if ! valid_dotfile "$dotfile"; then
            abort "'$dotfile' is not a supported dotfile"
        fi
    done
}

function install_dotfiles()
{
    for selected_dotfile in "${selected_dotfiles[@]}"; do
        local -r dotfile="$HOME/$selected_dotfile"

        if [[ -L "$dotfile" ]]; then
            rm "$dotfile"
        fi

        if [[ -e "$dotfile" ]]; then
            local -r archive="$HOME/dotfiles-archive"
            local -r archived_dotfile="$archive/$selected_dotfile"

            if [[ ! -d "$archive" ]]; then
                if ! mkdir "$archive" > "/dev/null"; then
                    abort "archive directory creation failure"
                fi
            fi

            if [[ -e "$archived_dotfile" ]]; then
                abort "'$selected_dotfile' archive already exists"
            fi

            if ! mv "$dotfile" "$archived_dotfile" > "/dev/null"; then
                abort "'$selected_dotfile' archival failure"
            fi
        fi
    done

    if ! ln -s "$repository/$selected_dotfile" "$dotfile" > "/dev/null"; then
        abort "'$selected_dotfile' installation failure"
    fi
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( dirname "$script" )
    local -r version=$( git -C "$repository" describe --always --dirty --broken )

    local supported_dotfiles; mapfile -t supported_dotfiles < <( git -C "$repository" ls-files ':!:.gitmodules' | cut -d / -f 1 | sort -u | xargs -r -d '\n' -I '{}' find "{}" -maxdepth 0 -name '.*' ); readonly supported_dotfiles

    local selected_dotfiles=()

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --all)
                selected_dotfiles=( "${supported_dotfiles[@]}" )
                break
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                selected_dotfiles+=( "$argument" )
                ;;
        esac
    done

    readonly selected_dotfiles

    validate_dotfiles
    install_dotfiles
}

main "$@"
