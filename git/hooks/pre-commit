#!/usr/bin/env bash

# dotfiles
#
# Copyright 2019 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: git/hooks/pre-commit
# Description: Git pre-commit hook script for the dotfiles repository.

function message()
{
    local -r param_content="$1"

    echo -n "$MNEMONIC: $param_content"
}

function errors_found()
{
    echo "error(s) found"
}

function error()
{
    local -r param_message="$1"

    ( >&2 echo "$MNEMONIC: $param_message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r param_message="$1"

        error "$param_message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $MNEMONIC - Execute the dotfiles repository's Git pre-commit hook."
    echo "SYNOPSIS"
    echo "    $MNEMONIC --help"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "EXAMPLES"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC"
}

function ensure_filenames_are_portable()
{
    message "checking for non-portable (non-ASCII) filenames ... "

    if [[ $( git -C "$REPOSITORY" diff --cached --name-only --diff-filter=A -z "$AGAINST" | LC_ALL=C tr -d '[ -~]\0' | wc -c ) != 0 ]]; then
        errors_found
        error "aborting commit due to non-portable (non-ASCII) filename(s)"
        abort
    fi

    echo "none"
}

function ensure_no_whitespace_errors_are_present()
{
    message "checking for whitespace errors .................... "

    if ! git -C "$REPOSITORY" diff-index --check --cached "$AGAINST" -- >/dev/null 2>&1; then
        errors_found
        error "aborting commit due to whitespace error(s), listed below"
        git diff-index --check --cached "$AGAINST" --
        abort
    fi

    echo "none"
}

function ensure_no_script_errors_are_present()
{
    message "checking for script errors ........................ "

    mapfile -t scripts < <( git -C "$REPOSITORY" ls-files | xargs -r -d '\n' -I '{}' find "$REPOSITORY/"{} -executable )

    if ! shellcheck "${scripts[@]}" >/dev/null 2>&1; then
        errors_found
        error "aborting commit due to script error(s), listed below"
        shellcheck "${scripts[@]}"
        abort
    fi

    echo "none"
}

function main()
{
    SCRIPT=$( readlink -f "$0" ); readonly SCRIPT
    HOOKS=$( dirname "$SCRIPT" ); readonly HOOKS
    MNEMONIC=$( basename "$SCRIPT" ); readonly MNEMONIC
    REPOSITORY=$( readlink -f "$HOOKS/../.." ); readonly REPOSITORY

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"
        shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if git rev-parse --verify HEAD >/dev/null 2>&1; then
        AGAINST=HEAD; readonly AGAINST
    else
        AGAINST=$( git hash-object -t tree /dev/null ); readonly AGAINST
    fi

    ensure_filenames_are_portable
    ensure_no_whitespace_errors_are_present
    ensure_no_script_errors_are_present
}

main "$@"
